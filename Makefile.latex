# PDF output.  Org mode generates Latex, and Latexmk generates the PDF.
# Everything that's generated goes into PDF/OUT and is safe to delete.  Not all
# Latex is generated by Org; some is hand-written in TEX/, certainly not safe to
# delete.

TEXINPUTS='.:tex:pdf:' # Trailing ':' will make pdflatex include system paths
LATEXMK_ARGS=-pdflatex=xelatex -output-directory=pdf/out -pdf -synctex=1 -quiet

# Convert all SVG images from svg folder to PDF into PDF/IMG folder.
SVG_SRC=$(wildcard svg/*.svg)
SVG_DST=$(patsubst svg/%.svg, pdf/img/%.pdf, $(SVG_SRC))

.PHONY: clean go

pdf/out/main.pdf: pdf/manuscript.tex \
                  pdf/acks.tex \
                  tex/main.tex \
                  tex/preamble.tex \
                  refs.bib \
                  tex/tufte-latex.sty \
                  $(SVG_DST)
	env TEXINPUTS=${TEXINPUTS} latexmk ${LATEXMK_ARGS} tex/main.tex

# Only useful for debugging the TeX output with Synctex, since it does not
# re-export the TeX from changes in the Org document.
go:
	env TEXINPUTS=${TEXINPUTS} latexmk ${LATEXMK_ARGS} -pvc tex/main.tex

pdf/manuscript.tex: manuscript.org tex/export-setup.el
	@echo 'Exporting to LaTeX...'
# Export whole Org document to LaTeX, with the prelude.
	@emacs --quick --batch \
         --load tex/export-setup.el \
         --file manuscript.org \
         --eval '(message (format "Org version %s" (org-version)))' \
         --eval '(org-latex-export-to-latex nil nil nil t)'

# Org creates the TeX in the same directory as the Org document.  Maybe there is
# a way to override it with ELisp, but for now...
	mv manuscript.tex pdf/manuscript.tex

pdf/acks.tex: manuscript.org tex/export-setup.el
# Export only the subtree Acknowledgements.
	@emacs --quick --batch \
         --load tex/export-setup.el \
         --file manuscript.org \
         --eval '(re-search-forward "\\\* Acknowledgements")' \
         --eval '(org-latex-export-to-latex nil t nil t)'
# Filename is specified as a property to the tree in the Org doc.

# Extract individual SVG from SVG containing multiple diagrams.
pdf/img/%.multi.pdf: svg/%.multi.svg bin/svgsplit
	./bin/svgsplit pdf $< pdf/img
  # We actually create multiple files, and we can't know their names from the
  # Makefile.  So we use a phony file to know when we need to keep track of
  # the last time we ran the command.
	@touch $@

# Convert SVG to PDF.
pdf/img/%.pdf: svg/%.svg
	rsvg-convert --format pdf --output $@ $<

clean:
	latexmk -output-directory=pdf -C -f pdf/manuscript.tex
	rm --force pdf/out/manuscript.synctex.gz \
             pdf/out/manuscript.bbl \
             pdf/out/manuscript.run.xml
	rm --force pdf/manuscript.tex
	rm --force pdf/acks.tex
	rm --force pdf/img/*.pdf
